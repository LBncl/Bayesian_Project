d2[i] ~ dnorm(mu2 + a1*(y[i-1] - mu), tau)
for(j in 1:t){
indicator1[j] <- ifelse(t[j] > 30)
indicator2[j] <- ifelse(t[j] < 30)
y[j] <- (d1 * indicator1[j]) + (d2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1", "trend"), n.iter=3E3, thin=3)
dic1 = dic.samples(model=model, n.iter=1E4)
# Question 3.2
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
d1[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
d2[i] ~ dnorm(mu2 + a1*(y[i-1] - mu), tau)
for(j in 1:n){
indicator1[j] <- ifelse(t[j] > 30)
indicator2[j] <- ifelse(t[j] < 30)
y[j] <- (d1 * indicator1[j]) + (d2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1", "trend"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
d1[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
d2[i] ~ dnorm(mu2 + a1*(y[i-1] - mu), tau)
indicator1[i] <- ifelse(t[i] > 30)
indicator2[i] <- ifelse(t[i] < 30)
y[i] <- (d1 * indicator1[i]) + (d2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1", "trend"), n.iter=3E3, thin=3)
# Question 3.2
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
d1[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
d2[i] ~ dnorm(mu2 + a1*(y[i-1] - mu), tau)
indicator1[i] <- ifelse(t[i] > 30)
indicator2[i] <- ifelse(t[i] < 30)
y[i] <- (d1[i] * indicator1[i]) + (d2[i] * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1", "trend"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
y[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
}
mu ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1", "trend"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
y[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
}
mu ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
samples
head(samples)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
indicator1[i] <- ifelse(e[t] < 30)
indicator2[i] <- ifelse(e[t] > 30)
y[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
}
mu ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
indicator1[i] <- ifelse(t[i] < 30)
indicator2[i] <- ifelse(t[i] > 30)
y[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
}
mu ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
?ifelse
# Question 3.2
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
indicator1[i] <- ifelse(t[i] < 30, 1, 0)
indicator2[i] <- ifelse(t[i] > 30, 1, 0)
y[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
}
mu ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
d1[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
d2[i] ~ dnorm(mu2 + a1*(y[i-1] - mu), tau)
indicator1[i] <- ifelse(t[i] > 30,1,0)
indicator2[i] <- ifelse(t[i] < 30,1,0)
y[i] <- (d1 * indicator1[i]) + (d2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
w[i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
w[i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
dic1 = dic.samples(model=model, n.iter=1E4)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j][i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j,i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
# Question 3.2
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[i,j] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j,i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
indicator1[i] <- ifelse(t[i] < 30, 1, 0)
indicator2[i] <- ifelse(t[i] > 30, 1, 0)
y[i] <- (p1 * indicator1[i]) + (p2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1"), n.iter=3E3, thin=3)
rm(model)
rm(model_string)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
indicator1[i] <- ifelse(t[i] < 30, 1, 0)
indicator2[i] <- ifelse(t[i] > 30, 1, 0)
y[i] <- (p1 * indicator1[i]) + (p2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
indicator1[i-1] <- ifelse(t[i-1] < 30, 1, 0)
indicator2[i-1] <- ifelse(t[i-1] > 30, 1, 0)
y[i-1] <- (p1 * indicator1[i-1]) + (p2 * indicator2[i-1])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
indicator1[i] <- ifelse(t[i] < 30, 1, 0)
indicator2[i] <- ifelse(t[i] > 30, 1, 0)
y[i,n] <- (p1 * indicator1[i]) + (p2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1"), n.iter=3E3, thin=3)
library(ProjectTemplate)
setwd("C:/Users/Lloyd Bates/Desktop/Postgraduate Newcastle Data Science MSc/Bayesian Data Analysis/Project")
create.project
library(ProjectTemplate)
setwd("C:/Users/Lloyd Bates/Desktop/Postgraduate Newcastle Data Science MSc/Bayesian Data Analysis/Project")
create.project("Bayesian_Analysis")
load.project()
setwd("C:/Users/Lloyd Bates/Desktop/Postgraduate Newcastle Data Science MSc/Bayesian Data Analysis/Project/Bayesian_Analysis")
load.project()
str(Reisby)
head(Reisby)
class(Reisby)
typeof(Reisby)
reisby = asDataFrame(Reisby)
reisby = as.data.frame(Reisby)
head(reisby)
str(reisby)
source("~/.active-rstudio-document", echo=TRUE)
dim(resiby)
dim(reisby)
# Split data into test and train
# Test
reisby.test = resby[1:200,]
# Split data into test and train
# Test
reisby.test = reisby[1:200,]
# Split data into test and train
# Test
reisby.test = reisby[1:200,]
# Split data into test and train
# Test
reisby.test = reisby[1:200,]
source("C:/Users/Lloyd Bates/Desktop/Postgraduate Newcastle Data Science MSc/Bayesian Data Analysis/Project/Bayesian_Analysis/munge/01-A.R", echo=TRUE)
reisby[1:200,]
