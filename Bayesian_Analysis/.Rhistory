jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
d1[i] ~ dnorm(mu + a1*(y[i-1] - mu), tau)
d2[i] ~ dnorm(mu2 + a1*(y[i-1] - mu), tau)
indicator1[i] <- ifelse(t[i] > 30,1,0)
indicator2[i] <- ifelse(t[i] < 30,1,0)
y[i] <- (d1 * indicator1[i]) + (d2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
w[i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
w[i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
dic1 = dic.samples(model=model, n.iter=1E4)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j][i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j,i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
# Question 3.2
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[i,j] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
}
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[j,i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "a1"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
for (j in 1:n){
indicator1[j] <- ifelse(t[j] < 30, 1, 0)
indicator2[j] <- ifelse(t[j] > 30, 1, 0)
y[i] <- (p1 * indicator1[j]) + (p2 * indicator2[j])
}
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1"), n.iter=3E3, thin=3)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
indicator1[i] <- ifelse(t[i] < 30, 1, 0)
indicator2[i] <- ifelse(t[i] > 30, 1, 0)
y[i] <- (p1 * indicator1[i]) + (p2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1"), n.iter=3E3, thin=3)
rm(model)
rm(model_string)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
indicator1[i] <- ifelse(t[i] < 30, 1, 0)
indicator2[i] <- ifelse(t[i] > 30, 1, 0)
y[i] <- (p1 * indicator1[i]) + (p2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
indicator1[i-1] <- ifelse(t[i-1] < 30, 1, 0)
indicator2[i-1] <- ifelse(t[i-1] > 30, 1, 0)
y[i-1] <- (p1 * indicator1[i-1]) + (p2 * indicator2[i-1])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1"), n.iter=3E3, thin=3)
# JAGS Code for AR[1] with varied mean
model_string <- "
model{
for (i in 2:n) {
p1 ~ dnorm(mu + a1*(y[i-1] - mu), tau)
p2 ~ dnorm(mu2 + a1*(y[i-1] - mu2), tau)
indicator1[i] <- ifelse(t[i] < 30, 1, 0)
indicator2[i] <- ifelse(t[i] > 30, 1, 0)
y[i,n] <- (p1 * indicator1[i]) + (p2 * indicator2[i])
}
mu ~ dnorm(0, 1E-6)
mu2 ~ dnorm(0, 1E-6)
a1 ~ dnorm(0, 1E-6)
tau ~ dgamma(0.001, 0.001)
}
"
jags_data = list(y=dat, n=length(dat) ,t=1:length(dat))
model = jags.model(textConnection(model_string), data=jags_data, n.chains=4)
update(model,n.iter=3E3)
samples = coda.samples(model=model, variable.names=c("mu", "mu2" ,"a1"), n.iter=3E3, thin=3)
# Script used to load analysis change the command below to root directory Bayesian_analysis
library(ProjectTemplate)
setwd("C:/Users/Lloyd Bates/Desktop/Postgraduate Newcastle Data Science MSc/Bayesian Data Analysis/Project/Bayesian_Analysis")
load.project()
# Pre-processing script.
# Convert to data frame
reisby = as.data.frame(Reisby)
# Remove rows with missing data
reisby = na.omit(reisby)
# Get number of groups in data
groups = unique(reisby$id)
# Data pre processing
for (i in 1:dim(reisby)[1]){
if (reisby$week[i] == 0 | 1){
reisby$week[i] = 0
} else{
reisby$week[i] = 1
}
if (reisby$hd[i] %in% 0:6){
reisby$hd[i] = 0
} else if (reisby$hd[i] %in% 7:17){
reisby$hd[i] = 1
} else if (reisby$hd[i] %in% 18:24){
reisby$hd[i] = 2
} else {
reisby$hd[i] = 3
}
}
# Re-encode id vector
reisby$id = match((reisby$id), groups)
# Test and train
reisby.train = reisby[1:200,]
reisby.test = reisby.scaled[201:dim(reisby)[1],]
# Scaled and normalized data frame
reisby.scaled = reisby
reisby.scaled$lnimi = scale(reisby.scaled$lnimi)
reisby.scaled$lndmi = scale(reisby.scaled$lndmi)
# Split data into test and train // note groups are not split as train[200] is 53
# and test[201] = 54
reisby.train.scaled = reisby.scaled[1:200,]
reisby.test.scaled = reisby.scaled[201:dim(reisby)[1],]
# Pre-processing script.
# Convert to data frame
reisby = as.data.frame(Reisby)
# Remove rows with missing data
reisby = na.omit(reisby)
# Get number of groups in data
groups = unique(reisby$id)
# Data pre processing
for (i in 1:dim(reisby)[1]){
if (reisby$week[i] == 0 | 1){
reisby$week[i] = 0
} else{
reisby$week[i] = 1
}
if (reisby$hd[i] %in% 0:6){
reisby$hd[i] = 0
} else if (reisby$hd[i] %in% 7:17){
reisby$hd[i] = 1
} else if (reisby$hd[i] %in% 18:24){
reisby$hd[i] = 2
} else {
reisby$hd[i] = 3
}
}
# Re-encode id vector
reisby$id = match((reisby$id), groups)
# Test and train
reisby.train = reisby[1:200,]
reisby.test = reisby[201:dim(reisby)[1],]
# Scaled and normalized data frame
reisby.scaled = reisby
reisby.scaled$lnimi = scale(reisby.scaled$lnimi)
reisby.scaled$lndmi = scale(reisby.scaled$lndmi)
# Split data into test and train // note groups are not split as train[200] is 53
# and test[201] = 54
reisby.train.scaled = reisby.scaled[1:200,]
reisby.test.scaled = reisby.scaled[201:dim(reisby)[1],]
# Script used to load analysis change the command below to root directory Bayesian_analysis
library(ProjectTemplate)
setwd("C:/Users/Lloyd Bates/Desktop/Postgraduate Newcastle Data Science MSc/Bayesian Data Analysis/Project/Bayesian_Analysis")
load.project()
# Libraries used
library(tidyverse)
library(rjags)
library(coda)
library(ggplot2)
model_string = "model{
# Defining Prior Hyperparameters:
mu_0 <- 0
tau_0 <- 1E-2
# Priors (M is the number predictors used):
for (j in 1:M) {
beta[j] ~ dnorm(mu_0, tau_0)
}
# Probability Model (N is number of data):
for (i in 1:N) {
mean[i] <- inprod(X[i, ], beta) # X is design matrix
Y[i] ~ dnorm(mean[i], tau)
}
tau ~ dgamma(0.1, 0.1)
# Prediction (L is the number of predictions to make):
for (k in 1:L) {
mean_pred[k] <- inprod(X_pred[k, ], beta)
Y_pred[k] ~ dnorm(mean_pred[k], tau)
}
}"
jags_data <- list(Y = reisby.train$hd, X = reisby.train[,3:7], X_pred = reisby.test[,3:7],
N = length(reisby.train$hd), M = ncol(reisby.train[,3:7]), L = nrow(reisby.test[,3:7]))
model <- jags.model(textConnection(model_string), data = jags_data, n.chains = 4)
update(model, n.iter = 10000)
samples <- coda.samples(model = model, variable.names = c("beta", "tau", "Y_pred"), n.iter = 1000, thin = 5)
mcmc_mat = as.matrix(samples)
acf(mcmc_mat[,i], lag.max=60, main=colnames(mcmc_mat)[i])
acf(mcmc_mat[,i], lag.max=60, main=colnames(mcmc_mat))
crosscorr.plot(samples)
mcmc_mean = summary(samples)$statistics[,1]
mcmc_mean
reisby.train$hd
# Please set the working directory to the root folder "Bayesian_Analysis"
library(ProjectTemplate)
setwd("C:/Users/Lloyd Bates/Desktop/Postgraduate Newcastle Data Science MSc/Bayesian Data Analysis/Project/Bayesian_Analysis")
load.project()
reisby
dim(reisby)
colnames(reisby)
groups = unique(reisby$id)
groups
length(groups)
str(seisby)
str(reisby)
str(Reisby)
pairs(Reisby)
pairs(reisby)
head(reisby)
modelstring="
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
tau ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
for (i in 1:N) {
y[i] ~ dnorm(mu[i], tau)
mu[i] = b0 + inprod(b, x[i,])
}
}"
reisby[,-1]
head(reisby)
head(reisby[,-4])
jags_data = list(y=y, x=x, N=nrow(x), p=ncol(x))
model = jags.model(textConnection(modelstring), data=jags_data, n.chains=4)
update(model, n.iter=1000)
th = 100 # Thinning interval
samples = coda.samples(model,
variable.names=c("b0", "sd", "b"), thin=th,
n.iter=th*1000)
summary(samples)
HPDinterval(samples[[1]])
y = reisby$lndmi
x = reisby[,-4]
jags_data = list(y=y, x=x, N=nrow(x), p=ncol(x))
model = jags.model(textConnection(modelstring), data=jags_data, n.chains=4)
update(model, n.iter=1000)
th = 100 # Thinning interval
samples = coda.samples(model,
variable.names=c("b0", "sd", "b"), thin=th,
n.iter=th*1000)
summary(samples)
HPDinterval(samples[[1]])
head(reisby)
x
x[,-1]
y = reisby$lndmi
x = reisby[,-4]
x = x[,-1]
jags_data = list(y=y, x=x, N=nrow(x), p=ncol(x))
model = jags.model(textConnection(modelstring), data=jags_data, n.chains=4)
update(model, n.iter=1000)
th = 100 # Thinning interval
samples = coda.samples(model,
variable.names=c("b0", "sd", "b"), thin=th,
n.iter=th*1000)
HPDinterval(samples[[1]])
mcmc_mean = summary(samples)$statistics[,1]
mcmc_mean
gelman.diag(samples, multivariate = FALSE)
crosscorr.plot(samples)
par(mfrow=c(2,2))
plot(samples, ask=TRUE)
plot(samples, ask=TRUE)
effectiveSize(samples)
plot(samples, auto.layout=FALSE, density=FALSE)
plot(samples, auto.layout=FALSE, density=FALSE)
